can you design an MVP for me. 
The app name Eagle, which is used for my company staff member to use, to gather terminal model information and other terminal payment system in Australia. This is kind of market survey app. In order to better understand the market landscape, we need to understand the systems existing merchants use. This allows us to better target product features and marketing campaigns.

I have a list of requirement, but this is for MVP so I think we need to focus only on HIGH Importance. 
1. Requirement: Easy to access on a mobile phone
User Story: Kane is a Quest staff member who is out shopping and wants to gather intelligence and note it down using their person mobile device, which could be iOS or Android. 
Notes: This could be an app or a shortcut for a link to a website.

2. Should enable quick addition of the data.
User story: Kane is doing this out of hours and is doing his personal shopping. He does not want to spend too long entering the information, so the user interface must require as few clicks as possible, ensuring the essential data is captured first, with optional data gathered second.
Notes: this is a set of optional/ mandatory questions.

3. Allow easy addition of new data points.
User story: Corey wants people to capture a new piece of data, but this is not available in the app currently. Enable the addition of new data points easily, ideally without requiring the user to update their app.

4. Use my Quest domain credentials: Kane wants to easily log into the app once and use his existing Quest domain email credentials to do so. Kane doesn’t want to have to sign into the app again after he has already signed in. Only allow @questps.com.au domain

5. Link to ELK
User story: Mark wants to view customer details in a dashboard format, based on the aggregated data that has been generated through the app, to assist with sales strategies. Must also have an export to csv option.

6. Database recognises brand capitalism: Kane accidentally entered a brand in all capital letters, even though it previously existed with standard capitalisation. Corey wants the database to recognise the capitalised brand name as the same brand.

Alternative idea to mitigate this issue: Data can only be submitted in dropdowns or using a text field on the side labelled “Can’t find the xxxxx? Enter it here.”. This would create a new dropdown option for all future submissions.
"
Notes: Remove case sensitive feature.

7. Data submission options access.
User story: Corey wants to review and edit dropdown option fields after a user has submitted them, to ensure they are correct moving forward. Changing field data shouldn’t change previous data submitted, unless ticked in a window prompt after editing.
Notes: Figuring out if we want to do it through user submitting the form or product team manually doing that.

8. Location-based duplicate entry prevention
User story: Kane wants to go to a store to enter some market intelligence details (unknowingly, another colleague has entered details for this store). When he gets to the store, he wants location services to be used as a method of determining whether this store already has an entry. 

If it does, it will prompt Kane, stating that the store is already in the database and providing the option to enter any missing (optional) fields.
Notes: Verification feature. Avoid duplication of location details by users. Update records if details have changed.
Example: To save the data record from the first person and in case person 2 go to the same places, have a verification feature. If new terminal has changed: person 2 able to change the information if not, leave it as it is.

9. Low-end technical requirements & storage: 
User story: Kane has an old phone but wants to run the application, but is afraid that the app won’t be available on his device’s app store.

Corey wants all Quest staff to have access to this app, so by minimising spec requirements, he can encourage more people to use the app.
Notes: Anyone with weak/ strong phone can use it.

Specify which software version on Android/ iOS


Here is the standard flow question gonna prompt to the user:
1: Brand of the merchant (Mandaroty) . When user enter the merchant name, it will populate the location for question 2 (Mandatory). It behave similar to Google maps. - 255 characters

Field format: Search + Dropdown, shortext Options will appear, if options don't exist, they can be added as a new option when submitted.
For location: shortext + precise location services prompt.

3 (Mandatory): Terminal Manufacturer: Dropdown (including "Other + Text" field)
4 (Mandatory) : Terminal mode: Search + Dropdown  - prompting a list of figures of terminals model. Options are dependent on the Terminal Manufacturer field, images of these would be provided as tappable options for selecting the terminal model.

5 (Mandatory) :how terminal set up with Point of sale. It can be standalone, integrated(wired/ wireless). it only prompt for question 6-7 if it is integrated. 

6 (Optional): POS Provider
7 (Optional) :POS Provider

8(Mandatory): Number of terminal
9(Optional) : Accepted Card Schemas: Dropdown, multiple choice
10( Optional): Alternative payment providers
11(Acquirer): Search + Dropdown

Above is also list of sample figure of the app











Designing an MVP for "Eagle," a market survey app for gathering terminal model information and payment systems in Australia, requires focusing on high-importance features that align with your user stories and requirements. Based on the details you provided, here's an outline of the MVP features:

MVP Feature Outline for "Eagle":
1. Cross-Platform Accessibility:
Feature: A responsive web application that is accessible via any mobile browser on iOS and Android devices.
Justification: This ensures easy access without the need to download an app and allows for immediate updates without user intervention.
2. Simplified Data Entry:
Feature: A streamlined interface with mandatory fields displayed first and optional fields accessible with a single tap.
Justification: This minimizes the time spent by users when entering data during personal time.
3. Dynamic Data Point Addition:
Feature: An admin panel where new data points can be added to the form without requiring an app update.
Justification: Allows Corey to update the data points as needed without disturbing the user experience.
4. Single Sign-On (SSO) with Quest Domain:
Feature: Integration with Quest's existing authentication system to enable SSO.
Justification: This allows users like Kane to log in once using their company credentials, improving security and convenience.
5. Data Visualization and Export:
Feature: A dashboard viewable in the app with an option to export data to CSV.
Justification: Enables Mark and other team members to view aggregated data for analysis and decision-making.
6. Intelligent Data Recognition:
Feature: A backend logic that normalizes text input to eliminate case-sensitive discrepancies.
Justification: Prevents duplicate entries of the same brand due to case sensitivity.
7. Admin Editing of Dropdown Options:
Feature: A backend feature for admins to edit dropdown options post-submission without affecting existing data.
Justification: Allows Corey to maintain data integrity and accuracy over time.
8. Location-Based Entry Checks:
Feature: Geolocation checks to alert users of existing entries for a store and prompt for additional information if needed.
Justification: Prevents duplicate entries and ensures the database is up-to-date.
9. Low Technical Requirements:
Feature: A lightweight web application designed to work on lower-end smartphones.
Justification: Ensures all staff, regardless of their device’s capabilities, can use the app.
Data Flow for User Interaction:
The app will prompt users to input data in a specific sequence, starting with mandatory fields (Brand, Location, Terminal Manufacturer, Terminal Mode, Terminal Setup) followed by optional fields (POS Provider, Card Schemes, etc.) if relevant.
The form will feature a mix of search fields, dropdown menus, and geolocation prompts to optimize the data entry process.
Users will be able to add new options to dropdowns if an entry does not exist, which will be available for future selections.
Technical and Design Considerations:
Frontend: Use of a framework like React or Vue.js to create a single-page application that feels native.
Backend: A RESTful API for data handling, which can be developed using Node.js or Django, for example.
Database: A flexible schema design in a database like PostgreSQL to accommodate changes in data points.
Authentication: Utilize OAuth for secure SSO integration.
Hosting: Cloud services like AWS or Azure for hosting the application and database.
User Interface: A clean, intuitive UI with large tap targets for field selection and data entry.
Development Strategy:
Phase 1: Develop core features for brand, location, and terminal information collection.
Phase 2: Integrate SSO and backend admin features.
Phase 3: Add advanced features like location-based checks and data visualization.
The development of the MVP should follow Agile methodologies, with iterative development, continuous feedback from users, and regular updates based on this feedback. This MVP will serve as the foundation for understanding the market landscape and will be designed to evolve based on the needs of your company and its users.